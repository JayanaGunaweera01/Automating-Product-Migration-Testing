name:  Main Migration Workflow 🐧🍎🪟

on: 
  workflow_dispatch:
    inputs:
        currentVersion:
          description: '🖥️ Specify the version of WSO2 IS that is presently installed in your environment.'
          default: '5.11.0'
          type: choice
          options: 
                - '5.9.0'
                - '5.10.0'    
                - '5.11.0'
                - '6.0.0'
                - '6.1.0'
                - '6.2.0'  
        migratingVersion:
          description: '💻 Specify the version of WSO2 IS that you want to migrate.'
          default: '6.0.0'
          type: choice
          options:
                - '5.10.0'    
                - '5.11.0'
                - '6.0.0'
                - '6.1.0'
                - '6.2.0'      
        database:
          description: '🐘 Select the database.'
          default: 'mysql'
          type: choice
          options: 
                - 'mysql'
                - 'mssql'
                - 'postgres'
        os:
          description: '🐧 Select the OS.'
          default: 'ubuntu-latest'
          type: choice
          options: 
                - 'ubuntu-latest'
                - 'macos-latest'
                - 'windows-latest'
        urlOld:
          description: '🔗 Provide the URL to download the old version of WSO2 IS.'
          default: https://github.com/wso2/product-is/releases/download/v5.11.0/wso2is-5.11.0.zip
          required: true
        urlNew:
          description: '🔗🆕 Provide the URL to download the version you want to upgrade WSO2 IS.'
          default: https://github.com/wso2/product-is/releases/download/v6.0.0-rc2/wso2is-6.0.0-rc2.zip
          required: true
jobs:
  
  ubuntu_postgres_setup:
    if: ${{ github.event.inputs.database == 'postgres' && github.event.inputs.os == 'ubuntu-latest' }} 
    runs-on: ${{ github.event.inputs.os }}
    steps:
       - name: 💾 Checkout code
         uses: actions/checkout@v2
       - name: 🐳 Setup Docker environment
         run: |
            # Get the ID of the workflow from the GitHub API using curl and jq
            WORKFLOW_ID=$(curl -s -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/JayanaGunaweera01/Automate-Product-Migration-Testing/actions/workflows | jq -r '.workflows[] | select(.name == "Main Migration Workflow 🐧🍎🪟") | .id')
            echo "Workflow ID: $WORKFLOW_ID"
            # Update and upgrade packages, and install necessary dependencies
            sudo apt-get update
            sudo apt-get upgrade
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            # Add Docker GPG key and add the Docker repository
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            # Update the packages again and install Docker CE
            sudo apt-get update
            sudo apt-get install -y docker-ce

       - name: 🐋 Run Docker command
         run: |
            # Create the PostgreSQL container if it doesn't already exist
            if ! docker ps -a | grep postgres; then
              echo "Creating the PostgreSQL container..."
              docker run -d -p 5432:5432 --name postgres -e POSTGRES_PASSWORD=postgres postgres
              sleep 20
              echo "PostgreSQL container created successfully."
            fi
            # Start the PostgreSQL server if it's not running
            if ! docker ps | grep postgres; then
              echo "Starting the PostgreSQL server..."
              docker start postgres
              sleep 20
              echo "PostgreSQL server started successfully."
            fi
            
            # Create a new database 'testdb'
            docker exec -i postgres psql -U postgres -c "CREATE DATABASE testdb;"
            echo "Database created successfully!"
            # Grant all privileges to postgres user
            docker exec -i postgres psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE testdb TO postgres;"
            echo "Database privileges granted successfully!"
            # Change the password for role postgres
            docker exec -i postgres psql -U postgres -c "ALTER USER postgres WITH PASSWORD 'postgres';"
            echo "Password for role 'postgres' changed successfully!"
            
       - name: 🚚 Copy SQL file to PostgreSQL container
         run: | 
            docker cp /home/runner/work/Automate-Product-Migration-Testing/Automate-Product-Migration-Testing/utils/dbscripts/postgresone.sql postgres:/
            docker exec -i postgres sh -c 'exec psql -U postgres -d testdb < /postgresone.sql'
            echo "Script1 executed successfully!"
            docker cp /home/runner/work/Automate-Product-Migration-Testing/Automate-Product-Migration-Testing/utils/dbscripts/identity/postgrestwo.sql postgres:/
            docker exec -i postgres sh -c 'exec psql -U postgres -d testdb < /postgrestwo.sql '
            echo "Script2 executed successfully!"
            docker cp /home/runner/work/Automate-Product-Migration-Testing/Automate-Product-Migration-Testing/utils/dbscripts/identity/uma/postgresthree.sql postgres:/
            docker exec -i postgres sh -c 'exec psql -U postgres -d testdb < /postgresthree.sql'
            echo "Script3 executed successfully!"
            docker cp /home/runner/work/Automate-Product-Migration-Testing/Automate-Product-Migration-Testing/utils/dbscripts/consent/postgresfour.sql postgres:/
            docker exec -i postgres sh -c 'exec psql -U postgres -d testdb < /postgresfour.sql'
            echo "Script4 executed successfully!"
            docker cp /home/runner/work/Automate-Product-Migration-Testing/Automate-Product-Migration-Testing/utils/dbscripts/metrics/postgresfive.sql postgres:/
            docker exec -i postgres sh -c 'exec psql -U postgres -d testdb < /postgresfive.sql'
            echo "Scripts executed successfully!"
            
       - name: 🪄 Run postgres migration script
         run: |
            chmod +x 01-Migration-Automation/ubuntu-postgre-migration-script.sh
            01-Migration-Automation/ubuntu-postgre-migration-script.sh "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}" "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" | tee 01-Migration-Automation/logs.txt 
         continue-on-error: true
       - name: 🚨 Print errors in logs.txt in red color
         run: |
            if [ -f "01-Migration-Automation/logs.txt" ]; then
              chmod +x 01-Migration-Automation/logs.txt
              sed -i 's/.*\(Error\|failed\|cannot\|Permission denied\).*/\o033[31m&\o033[0m/' 01-Migration-Automation/logs.txt
            fi
       - name: 📦 Upload artifact
         uses: actions/upload-artifact@v3
         if: always() 
         with:
            name: "migration-logs-${{ github.event.inputs.database }}-${{ github.event.inputs.os }}"
            path: 01-Migration-Automation/logs.txt
            retention-days: 7
            if-no-files-found: ignore

  ubuntu_mssql_setup:
   if: ${{ github.event.inputs.database == 'mssql' && github.event.inputs.os == 'ubuntu-latest' }} 
   runs-on: ${{ github.event.inputs.os }}
   services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: YourStrongPassw0rd
          ACCEPT_EULA: Y
          MSSQL_PID: Developer
        ports:
          - 1433:1433
        options: --name=sqlserver-test --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrongPassw0rd' -Q 'SELECT 1'" --health-interval=10s --health-timeout=5s --health-retries=3

   steps:  
      - name: 💾 Checkout code
        uses: actions/checkout@v3 
      - name: 🏗️ Create MS SQL Database
        run: |
          sudo apt-get update && sudo apt-get install -y mssql-tools
          /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrongPassw0rd' -Q 'CREATE DATABASE testdb'
      - name: 🚚 Copy SQL files to MSSQL container
        run: |
        
          docker cp ./utils/dbscripts/mssql.sql sqlserver-test:/mssql.sql
          docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrongPassw0rd' -d testdb -i /mssql.sql
          
          docker cp ./utils/dbscripts/identity/mssql.sql sqlserver-test:/identity-mssql.sql
          docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrongPassw0rd' -d testdb -i /identity-mssql.sql
          
          docker cp ./utils/dbscripts/identity/uma/mssql.sql sqlserver-test:/identity-uma-mssql.sql
          docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrongPassw0rd' -d testdb -i /identity-uma-mssql.sql
          
          docker cp ./utils/dbscripts/consent/mssql.sql sqlserver-test:/consent-mssql.sql
          docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrongPassw0rd' -d testdb -i /consent-mssql.sql
          
          docker cp ./utils/dbscripts/metrics/mssql.sql sqlserver-test:/metrics-mssql.sql
          docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrongPassw0rd' -d testdb -i /metrics-mssql.sql
          
          echo "Copied scripts to container"
          
      - name: 🗝️ Grant permission to run script - mssql
        run: chmod +x 01-Migration-Automation/ubuntu-mssql-migration-script.sh
      - name: 🪄 Run migration automation script - mssql
        run: sh 01-Migration-Automation/ubuntu-mssql-migration-script.sh "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}"  "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}" "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" | tee 01-Migration-Automation/logs.txt      
        continue-on-error: true
      - name: 🚨 Print errors in logs.txt in red color
        run: |
            if [ -f "01-Migration-Automation/logs.txt" ]; then
              chmod +x 01-Migration-Automation/logs.txt
              sed -i 's/.*\(Error\|failed\|cannot\|Permission denied\).*/\o033[31m&\o033[0m/' 01-Migration-Automation/logs.txt
            fi  
      - name: 📦 Upload artifact
        uses: actions/upload-artifact@v3
        if: always() 
        with:
         name: "migration-logs-${{ github.event.inputs.database }}-${{ github.event.inputs.os }}"
         path: 01-Migration-Automation/logs.txt
         retention-days: 7
     
  ubuntu_mysql_setup:
    if: ${{ github.event.inputs.database == 'mysql' && github.event.inputs.os == 'ubuntu-latest' }} 
    runs-on: ${{ github.event.inputs.os }}
    steps:
      - name: 💾 Checkout code
        uses: actions/checkout@v2
      - name: 🗝️ Grant permission to run script - mysql
        run: chmod +x 01-Migration-Automation/ubuntu-mysql-migration-script.sh  
      - name: 🪄 Run migration automation script - mysql   
        run: sh 01-Migration-Automation/ubuntu-mysql-migration-script.sh "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}" "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}" "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" | tee 01-Migration-Automation/logs.txt 
        continue-on-error: true
      - name: 🚨 Print errors in logs.txt in red color
        run: |
          if [ -f "01-Migration-Automation/logs.txt" ]; then
            chmod +x 01-Migration-Automation/logs.txt
            sed -E -e 's/(Error|error|failed|cannot|Permission denied)/\o033[31m&\o033[0m/g' 01-Migration-Automation/logs.txt
          fi
      - name: 📦 Upload artifact
        uses: actions/upload-artifact@v3
        if: always() 
        with:
          name: "migration-logs-${{ github.event.inputs.database }}-${{ github.event.inputs.os }}"
          path: 01-Migration-Automation/logs.txt
          retention-days: 7
          continue-on-error: true
  macos_postgres_setup:
    runs-on: ${{ github.event.inputs.os }}
    if: ${{ github.event.inputs.database == 'postgres' && github.event.inputs.os == 'macos-latest' }} 
    steps:
       - name: 💾 Checkout code
         uses: actions/checkout@v2
       - name: 🔧 Set up PostgreSQL
         env:
            PGDATA: /usr/local/var/postgres
            PGDATABASE: testdb
         run: |
          brew update
          brew install postgresql
          initdb $PGDATA
          pg_ctl -D $PGDATA start
          createuser -s postgres
          createdb $PGDATABASE
          psql -c "GRANT ALL PRIVILEGES ON DATABASE $PGDATABASE TO postgres;"
       - name: 🐘 Execute Postgres SQL scripts
         run: |
          psql -d testdb -f /Users/runner/work/Automate-Product-Migration-Testing/Automate-Product-Migration-Testing/utils/dbscripts/postgresone.sql
          psql -d testdb -f /Users/runner/work/Automate-Product-Migration-Testing/Automate-Product-Migration-Testing/utils/dbscripts/consent/postgresfour.sql
          psql -d testdb -f /Users/runner/work/Automate-Product-Migration-Testing/Automate-Product-Migration-Testing/utils/dbscripts/identity/postgrestwo.sql
          psql -d testdb -f /Users/runner/work/Automate-Product-Migration-Testing/Automate-Product-Migration-Testing/utils/dbscripts/identity/uma/postgresthree.sql
          psql -d testdb -f /Users/runner/work/Automate-Product-Migration-Testing/Automate-Product-Migration-Testing/utils/dbscripts/metrics/postgresfive.sql
       - name: ✅ Verify script execution
         run: psql -d testdb -c 'SHOW server_version'
         shell: bash
       - uses: actions/checkout@v3
       - name: 🗝️ Grant permission to run script - postgres 
         run: chmod +x 01-Migration-Automation/mac-postgre-migration-script.sh
       - name: 🪄 Run migration automation script - postgres
         run: sh 01-Migration-Automation/mac-postgre-migration-script.sh "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}" "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}" "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" | tee 01-Migration-Automation/logs.txt 
         continue-on-error: true
       #- name: 🚨 Print errors in logs.txt in red color
         #run: |
           # if [ -f "01-Migration-Automation/logs.txt" ]; then
            #  chmod +x 01-Migration-Automation/logs.txt
            #  sed -i 's/.*\(Error\|failed\|cannot\|Permission denied\).*/\o033[31m&\o033[0m/' 01-Migration-Automation/logs.txt
           # fi
       - name: 📦 Upload artifact
         uses: actions/upload-artifact@v3
         if: always() 
         with:
          name: "migration-logs-${{ github.event.inputs.database }}-${{ github.event.inputs.os }}"
          path: 01-Migration-Automation/logs.txt
          retention-days: 7
          if-no-files-found: ignore
          
  macos_mssql_setup:
    if: ${{ github.event.inputs.database == 'mssql' && github.event.inputs.os == 'macos-latest' }} 
    runs-on: ${{ github.event.inputs.os }}
    steps:
      - name: 💾 Checkout code
        uses: actions/checkout@v2
      - uses: potatoqualitee/mssqlsuite@v1.7
        with:
          install: sqlengine, sqlclient, sqlpackage, localdb
          version: 2019
          SA-password: YourStrongPassw0rd
          
      - name: 🏗️ Create MS SQL Database
        run: sqlcmd -U SA -P 'YourStrongPassw0rd' -Q 'CREATE DATABASE testdb'
      - name: Run query
        run: sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -Q 'SELECT @@VERSION'
          
      - name: 🚀 Run script1
        run: sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -i /Users/runner/work/Automate-Product-Migration-Testing/Automate-Product-Migration-Testing/utils/dbscripts/mssql.sql
      - name: 🚀 Run script2
        run: sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -i /Users/runner/work/Automate-Product-Migration-Testing/Automate-Product-Migration-Testing/utils/dbscripts/identity/mssql.sql
      - name: 🚀 Run script3
        run: sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -i /Users/runner/work/Automate-Product-Migration-Testing/Automate-Product-Migration-Testing/utils/dbscripts/identity/uma/mssql.sql
      - name: 🚀 Run script4
        run: sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -i /Users/runner/work/Automate-Product-Migration-Testing/Automate-Product-Migration-Testing/utils/dbscripts/consent/mssql.sql
      - name: 🚀 Run script5
        run: sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -i /Users/runner/work/Automate-Product-Migration-Testing/Automate-Product-Migration-Testing/utils/dbscripts/metrics/mssql.sql
      
      - name: ✅ Verify script execution
        run: sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -Q 'SELECT @@VERSION'
      - uses: actions/checkout@v3
      - name: 🗝️ Grant permission to run script - mssql
        if: github.event.inputs.database == 'mssql'
        run: chmod +x 01-Migration-Automation/mac-mssql-migration-script.sh
        continue-on-error: true
      - name: 🪄 Run migration automation script - mssql
        if: github.event.inputs.database == 'mssql'
        run: sh 01-Migration-Automation/mac-mssql-migration-script.sh "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}"  "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}" "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" | tee 01-Migration-Automation/logs.txt 
        continue-on-error: true
      #- name: 🚨 Print errors in logs.txt in red color
       # run: sed -i 's/.*\(Error\|failed\|cannot\|Permission denied\).*/\o033[31m&\o033[0m/' 01-Migration-Automation/logs.txt
      - name: 📦 Upload artifact
        uses: actions/upload-artifact@v3
        if: always() 
        with:
          name: "migration-logs-${{ github.event.inputs.database }}-${{ github.event.inputs.os }}"
          path: 01-Migration-Automation/logs.txt
          retention-days: 7
          if-no-files-found: ignore
  
  macos_mysql_setup:
    if: ${{ github.event.inputs.database == 'mysql' && github.event.inputs.os == 'macos-latest' }} 
    runs-on: ${{ github.event.inputs.os }}
    steps:
       - name: 💾 Checkout code
         uses: actions/checkout@v3 
       - name: 🗝️ Grant permission to run script - mysql
         run: chmod +x 01-Migration-Automation/mac-mysql-migration-script.sh  
       - name: 🪄 Run migration automation script - mysql     
         run: sh 01-Migration-Automation/mac-mysql-migration-script.sh "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}"  "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}" "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" | tee 01-Migration-Automation/logs.txt 
         continue-on-error: true
       #- name: 🚨 Print errors in logs.txt in red color
         #run: |
          #  if [ -f "01-Migration-Automation/logs.txt" ]; then
           #   chmod +x 01-Migration-Automation/logs.txt
            #  sed -i 's/.*\(Error\|failed\|cannot\|Permission denied\).*/\o033[31m&\o033[0m/' 01-Migration-Automation/logs.txt
           # fi
       - name: 📦 Upload artifact
         uses: actions/upload-artifact@v3
         if: always() 
         with:
          name: "migration-logs-${{ github.event.inputs.database }}-${{ github.event.inputs.os }}"
          path: 01-Migration-Automation/logs.txt
          retention-days: 7
          if-no-files-found: ignore
