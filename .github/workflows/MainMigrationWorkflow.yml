name: 🐧🍎🪟 Main Migration Workflow

on:
  workflow_dispatch:
    inputs:
      currentVersion:
        description: "🖥️ Specify the version of WSO2 IS that is presently installed in your environment."
        default: "5.11.0"
        type: choice
        options:
          - "5.9.0"
          - "5.10.0"
          - "5.11.0"
          - "6.0.0"
          - "6.1.0"
          - "6.2.0"
      migratingVersion:
        description: "💻 Specify the version of WSO2 IS that you want to migrate."
        default: "6.0.0"
        type: choice
        options:
          - "5.10.0"
          - "5.11.0"
          - "6.0.0"
          - "6.1.0"
          - "6.2.0"
      database:
        description: "🐘 Select the database."
        default: "mysql"
        type: choice
        options:
          - "mysql"
          - "mssql"
          - "postgres"
      os:
        description: "🐧 Select the OS."
        default: "ubuntu-latest"
        type: choice
        options:
          - "ubuntu-latest"
          - "macos-latest"
          - "windows-latest"
      urlOld:
        description: "🔗 Provide the URL to download the old version of WSO2 IS."
        default: https://github.com/wso2/product-is/releases/download/v5.11.0/wso2is-5.11.0.zip
        required: true
      urlNew:
        description: "🔗🆕 Provide the URL to download the version you want to upgrade WSO2 IS."
        default: https://github.com/wso2/product-is/releases/download/v6.0.0-rc2/wso2is-6.0.0-rc2.zip
        required: true
jobs:
  migration:
    runs-on: ${{ github.event.inputs.os }}
    steps:
      - name: 💾 Checkout Code
        uses: actions/checkout@v3

      - name: 🐳 Setup Docker
        if: ${{ github.event.inputs.database == 'postgres' && github.event.inputs.os == 'ubuntu-latest' }}
        run: |
          # Update and upgrade packages, and install necessary dependencies
          sudo apt-get update
          sudo apt-get upgrade
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          # Add Docker GPG key and add the Docker repository
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          # Update the packages again and install Docker CE
          sudo apt-get update
          sudo apt-get install -y docker-ce

      - name: 🐘 Setup PostgreSQL 🐧 Ubuntu
        if: ${{ github.event.inputs.database == 'postgres' && github.event.inputs.os == 'ubuntu-latest' }}
        run: |
          # Create the PostgreSQL container if it doesn't already exist
          if ! docker ps -a | grep postgres; then
            echo "Creating the PostgreSQL container..."
            docker run -d -p 5432:5432 --name postgres -e POSTGRES_PASSWORD=postgres postgres
            sleep 20
            echo "PostgreSQL container created successfully."
          fi
          # Start the PostgreSQL server if it's not running
          if ! docker ps | grep postgres; then
            echo "Starting the PostgreSQL server..."
            docker start postgres
            sleep 20
            echo "PostgreSQL server started successfully."
          fi
          # Create a new database 'testdb'
          docker exec -i postgres psql -U postgres -c "CREATE DATABASE testdb;"
          echo "Database created successfully!"
          # Grant all privileges to postgres user
          docker exec -i postgres psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE testdb TO postgres;"
          echo "Database privileges granted successfully!"
          # Change the password for role postgres
          docker exec -i postgres psql -U postgres -c "ALTER USER postgres WITH PASSWORD 'postgres';"
          echo "Password for role 'postgres' changed successfully!"

      - name: 🚚 Copy SQL Files To Docker Container 🐘 PostgreSQL 🐧 Ubuntu
        if: ${{ github.event.inputs.database == 'postgres' && github.event.inputs.os == 'ubuntu-latest' }}
        run: |
          docker cp /home/runner/work/Automating-Product-Migration-Testing/Automating-Product-Migration-Testing/utils/db-scripts/IS-5.11/postgresone.sql postgres:/
          docker exec -i postgres sh -c 'exec psql -U postgres -d testdb < /postgresone.sql'
          echo "Postgre database created successfully!"
          docker cp /home/runner/work/Automating-Product-Migration-Testing/Automating-Product-Migration-Testing/utils/db-scripts/IS-5.11/identity/postgrestwo.sql postgres:/
          docker exec -i postgres sh -c 'exec psql -U postgres -d testdb < /postgrestwo.sql '
          echo "Script1 executed successfully!"
          docker cp /home/runner/work/Automating-Product-Migration-Testing/Automating-Product-Migration-Testing/utils/db-scripts/IS-5.11/identity/uma/postgresthree.sql postgres:/
          docker exec -i postgres sh -c 'exec psql -U postgres -d testdb < /postgresthree.sql'
          echo "Script2 executed successfully!"
          docker cp /home/runner/work/Automating-Product-Migration-Testing/Automating-Product-Migration-Testing/utils/db-scripts/IS-5.11/consent/postgresfour.sql postgres:/
          docker exec -i postgres sh -c 'exec psql -U postgres -d testdb < /postgresfour.sql'
          echo "Script3 executed successfully!"
          docker cp /home/runner/work/Automating-Product-Migration-Testing/Automating-Product-Migration-Testing/utils/db-scripts/IS-5.11/metrics/postgresfive.sql postgres:/
          docker exec -i postgres sh -c 'exec psql -U postgres -d testdb < /postgresfive.sql'
          echo "All postgre scripts executed successfully!"
          
      - name: 🌐 Setup MSSQL 🐧 Ubuntu
        if: ${{ github.event.inputs.database == 'mssql' && github.event.inputs.os == 'ubuntu-latest' }}
        run: |
          # Start the MSSQL container if it doesn't already exist
          if ! docker ps -a | grep sqlserver-test; then
            echo "Creating the MSSQL container..."
            docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=YourStrongPassw0rd" -p 1433:1433 --name sqlserver-test -d mcr.microsoft.com/mssql/server:2019-latest
            sleep 30
            echo "MSSQL container created successfully."
          fi
          # Create a new database 'testdb'
          /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrongPassw0rd' -Q 'CREATE DATABASE testdb'
          echo "Database created successfully!"

      - name: 🚚 Copy SQL Files To Docker Container 🌐 MSSQL 🐧 Ubuntu
        if: ${{ github.event.inputs.database == 'mssql' && github.event.inputs.os == 'ubuntu-latest' }}
        run: |
          docker cp ./utils/db-scripts/IS-5.11/mssql.sql sqlserver-test:/mssql.sql
          docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrongPassw0rd' -d testdb -i /mssql.sql

          docker cp ./utils/db-scripts/IS-5.11/identity/mssql.sql sqlserver-test:/identity-mssql.sql
          docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrongPassw0rd' -d testdb -i /identity-mssql.sql

          docker cp ./utils/db-scripts/IS-5.11/identity/uma/mssql.sql sqlserver-test:/identity-uma-mssql.sql
          docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrongPassw0rd' -d testdb -i /identity-uma-mssql.sql

          docker cp ./utils/db-scripts/IS-5.11/consent/mssql.sql sqlserver-test:/consent-mssql.sql
          docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrongPassw0rd' -d testdb -i /consent-mssql.sql

          docker cp ./utils/db-scripts/IS-5.11/metrics/mssql.sql sqlserver-test:/metrics-mssql.sql
          docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrongPassw0rd' -d testdb -i /metrics-mssql.sql

          echo "Copied mssql scripts to docker container"

      - name: 🐘 Setup PostgreSQL 🍎 Mac
        if: ${{ github.event.inputs.database == 'postgres' && github.event.inputs.os == 'macos-latest' }}
        env:
          PGDATA: /usr/local/var/postgres
          PGDATABASE: testdb
        run: |
          brew update
          brew install postgresql
          initdb $PGDATA
          pg_ctl -D $PGDATA start
          createuser -s postgres
          createdb $PGDATABASE
          psql -c "GRANT ALL PRIVILEGES ON DATABASE $PGDATABASE TO postgres;"

      - name: 🐘 Execute PostgreSQL Scripts 🍎 Mac
        if: ${{ github.event.inputs.database == 'postgres' && github.event.inputs.os == 'macos-latest' }}
        run: |
          psql -d testdb -f /Users/runner/work/Automating-Product-Migration-Testing/Automating-Product-Migration-Testing/utils/db-scripts/IS-5.11/postgresone.sql
          psql -d testdb -f /Users/runner/work/Automating-Product-Migration-Testing/Automating-Product-Migration-Testing/utils/db-scripts/IS-5.11/consent/postgresfour.sql
          psql -d testdb -f /Users/runner/work/Automating-Product-Migration-Testing/Automating-Product-Migration-Testing/utils/db-scripts/IS-5.11/identity/postgrestwo.sql
          psql -d testdb -f /Users/runner/work/Automating-Product-Migration-Testing/Automating-Product-Migration-Testing/utils/db-scripts/IS-5.11/identity/uma/postgresthree.sql
          psql -d testdb -f /Users/runner/work/Automating-Product-Migration-Testing/Automating-Product-Migration-Testing/utils/db-scripts/IS-5.11/metrics/postgresfive.sql

      - name: 🐘 Verify PostgreSQL Script Execution 🍎 Mac
        if: ${{ github.event.inputs.database == 'postgres' && github.event.inputs.os == 'macos-latest' }}
        run: psql -d testdb -c 'SHOW server_version'
        shell: bash

      - name: 🌐 Setup MSSQL 🍎 Mac
        if: ${{ github.event.inputs.database == 'mssql' && github.event.inputs.os == 'macos-latest' }}
        run: |
          sqlcmd -U SA -P 'YourStrongPassw0rd' -Q 'CREATE DATABASE testdb'
          sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -Q 'SELECT @@VERSION'

      - name: 🌐 Execute MSSQL Scripts 🍎 Mac
        if: ${{ github.event.inputs.database == 'mssql' && github.event.inputs.os == 'macos-latest' }}
        run: |
          sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -i /Users/runner/work/Automating-Product-Migration-Testing/Automating-Product-Migration-Testing/utils/db-scripts/IS-5.11/mssql.sql
          sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -i /Users/runner/work/Automating-Product-Migration-Testing/Automating-Product-Migration-Testing/utils/db-scripts/IS-5.11/identity/mssql.sql
          sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -i /Users/runner/work/Automating-Product-Migration-Testing/Automating-Product-Migration-Testing/utils/db-scripts/IS-5.11/identity/uma/mssql.sql
          sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -i /Users/runner/work/Automating-Product-Migration-Testing/Automating-Product-Migration-Testing/utils/db-scripts/IS-5.11/consent/mssql.sql
          sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -i /Users/runner/work/Automating-Product-Migration-Testing/Automating-Product-Migration-Testing/utils/db-scripts/IS-5.11/metrics/mssql.sql

      - name: 🌐 Verify MSSQL Script Execution 🍎 Mac
        if: ${{ github.event.inputs.database == 'mssql' && github.event.inputs.os == 'macos-latest' }}
        run: sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -Q 'SELECT @@VERSION'

      - name: 🗝️ Grant Permission To Execute Migration Automation Script 🐧 Ubuntu
        if: ${{ (github.event.inputs.database == 'mssql' || github.event.inputs.database == 'mysql' || github.event.inputs.database == 'postgres'|| github.event.inputs.database == 'mysql' || github.event.inputs.database == 'mysql') && github.event.inputs.os == 'ubuntu-latest' }}
        run: chmod +x migration-automation/ubuntu-os/migration-script-ubuntu.sh
      - name: 🗝️ Grant Permission To Execute Migration Automation Script 🍎 Mac
        if: ${{ (github.event.inputs.database == 'mssql' || github.event.inputs.database == 'mysql' || github.event.inputs.database == 'postgres'|| github.event.inputs.database == 'mysql' || github.event.inputs.database == 'mysql') && github.event.inputs.os == 'macos-latest' }}
        run: chmod +x migration-automation/mac-os/migration-script-mac.sh
      - name: 🗝️ Grant Permission To Execute Migration Automation Script 🪟 Windows
        if: ${{ (github.event.inputs.database == 'mssql' || github.event.inputs.database == 'mysql' || github.event.inputs.database == 'postgres'|| github.event.inputs.database == 'mysql' || github.event.inputs.database == 'mysql') && github.event.inputs.os == 'windows-latest' }}
        run: chmod +x migration-automation/windows-os/migration-script-windows.sh

      - name: 🚀 Execute Migration Automation Script 🐧 Ubuntu
        if: ${{ (github.event.inputs.database == 'mssql' || github.event.inputs.database == 'mysql' || github.event.inputs.database == 'postgres' || github.event.inputs.database == 'mysql' || github.event.inputs.database == 'mysql') && github.event.inputs.os == 'ubuntu-latest' }}
        run: |
          sh migration-automation/ubuntu-os/migration-script-ubuntu.sh "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}" "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}" "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" | tee migration-automation/logs.txt
        continue-on-error: true
      
      - name: 🚀 Execute Migration Automation Script 🍎 Mac
        if: ${{ (github.event.inputs.database == 'mssql' || github.event.inputs.database == 'mysql' || github.event.inputs.database == 'postgres' || github.event.inputs.database == 'mysql' || github.event.inputs.database == 'mysql') && github.event.inputs.os == 'macos-latest' }}
        run: |
          sh migration-automation/mac-os/migration-script-mac.sh "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}" "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}" "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" | tee migration-automation/logs.txt
        continue-on-error: true
      - name: 🚀 Execute Migration Automation Script 🪟 Windows
        if: ${{ (github.event.inputs.database == 'mssql' || github.event.inputs.database == 'mysql' || github.event.inputs.database == 'postgres' || github.event.inputs.database == 'mysql' || github.event.inputs.database == 'mysql') && github.event.inputs.os == 'windows-latest' }}
        run: |
          sh migration-automation/windows-os/migration-script-windows.ps1 "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}" "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}" "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" | tee migration-automation/logs.txt
        continue-on-error: true

      - name: 💥 Print Errors In Logs
        run: |
          if [ -f "migration-automation/logs.txt" ]; then
            chmod +x migration-automation/logs.txt
            sed -i -e 's/Error/\o033[31m&\o033[0m/g' \
                  -e 's/failed/\o033[31m&\o033[0m/g' \
                  -e 's/cannot/\o033[31m&\o033[0m/g' \
                  -e 's/Permission denied/\o033[31m&\o033[0m/g' migration-automation/logs.txt
          fi
      - name: 📦 Upload Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: "migration-logs-${{ github.event.inputs.database }}-${{ github.event.inputs.os }}"
          path: migration-automation/logs.txt
          retention-days: 7

